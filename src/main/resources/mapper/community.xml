<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.kosta.mapper.CommunityMapper">

<parameterMap type="java.util.HashMap" id="hashmap"/>
  
  <resultMap type="com.kosta.dto.ReviewDTO" id="reviewdto">
  	<result column="content_no" property="contentno" />
  	<result column="user_no" property="userno" />
  	<result column="user_id" property="userid" />
  	<result column="content_title" property="title" />
  	<result column="content_date" property="writedate" />
  	<result column="content_content" property="contents" />
  	<result column="content_like" property="like" />
  	<result column="content_hate" property="dislike" /> 	
  </resultMap>
  

<select id="totalCount" parameterMap="hashmap" resultType="int">
	select count(*)
	from comm_board
	<where>
		<if test="searchtxt!=null and searchtxt!='' and !searchtxt.equals('') ">
			<choose>
				<when test="search=='userno'">
					and user_no=#{searchtxt}				
				</when>
				<when test="search=='dislike'">
					and upper(content_hate) like '%'|| upper(#{searchtxt})||'%'				
				</when>
				<when test="search=='like'">
					and content_like=#{searchtxt}				
				</when>
			</choose>	
		</if>		
	</where>
</select>

<select id="totalCount2" resultType="int">
	select count(*)
	from comm_board
	where board_distinct_no = #{boardno}
</select>

<!-- 리뷰 페이지 모든 리뷰 -->
<select id="list" parameterMap="hashmap" resultMap="reviewdto">
	select A.*
	from (select S.*, @rownum:=@rownum+1 as rn
	  	  from (select content_no, user_id, e1.user_no, board_distinct_no, content_date, content_content, content_like, content_hate
			    from comm_board e1 left join user_info e2
			    on e1.user_no=e2.user_no, (select @rownum:=0)R
                where 1=1) S
                where board_distinct_no = 1
				order by content_date DESC ) A
			<where>
				<![CDATA[
					rn>=#{startrow} and rn<=#{endrow}
				]]>	
			</where>
</select>


  
<!-- 리뷰 페이지 베스트 리뷰 -->
<select id="getreview" resultMap="reviewdto">
	select content_no, user_id, e1.user_no, content_date, content_content, content_like, content_hate
	from comm_board e1 left join user_info e2
    on e1.user_no=e2.user_no
	where board_distinct_no = 1
	order by content_like DESC, content_date DESC
	limit 2
</select>

<!-- 리뷰 페이지 일반 리뷰 -->
<select id="getgeneralreview" resultMap="reviewdto">
	select content_no, user_id, e1.user_no, content_date, content_content, content_like, content_hate
	from comm_board e1 left join user_info e2
    on e1.user_no=e2.user_no
	where board_distinct_no = 1
	order by content_date DESC
	limit 4
</select>

<!-- 리뷰 페이지 모든 리뷰 -->
<!-- <select id="getallreview" resultMap="reviewdto">
	select content_no, user_id, e1.user_no, content_date, content_content, content_like, content_hate
	from comm_board e1 inner join user_info e2
    on e1.user_no=e2.user_no
	where board_distinct_no = 1
	order by content_date DESC
</select> -->


<!-- 참여 게시판 메인 명대사 -->
<select id="getfamousline" resultMap="reviewdto">
	select content_no, user_no, content_date, content_content, content_like, content_hate
	from comm_board
	where board_distinct_no = 2
	order by content_date DESC
	limit 4
</select>


<!-- 참여 게시판 모든 명대사 -->
<select id="getallfamousline" parameterMap="hashmap" resultMap="reviewdto">
	select A.*
	from (select S.*, @rownum:=@rownum+1 as rn
	  	  from (select user_no, board_distinct_no, content_date, content_content, content_like, content_hate
			    from comm_board, (select @rownum:=0)R
                where 1=1) S
                where board_distinct_no = 2
				order by content_date DESC ) A
			<where>
				<![CDATA[
					rn>=#{startrow} and rn<=#{endrow}
				]]>	
			</where>
</select>

<!-- 자유게시판 리스트 -->
<select id="getalluserforum" resultMap="reviewdto">
	select content_no, user_id, e1.user_no, content_date, content_title, content_content, content_like, content_hate
	from comm_board e1 left join user_info e2
	on e1.user_no=e2.user_no
	where board_distinct_no = 5
	order by content_date DESC
</select>

<select id="allUserForum" parameterType="hashmap" resultMap="reviewdto">
	select A.*
	from (select S.*, @rownum:=@rownum+1 as rn
	  	  from (select content_no, user_id, e1.user_no, board_distinct_no, content_title, content_content, content_date, content_like, content_hate
			    from comm_board e1 left join user_info e2 
			    on e1.user_no=e2.user_no, (select @rownum:=0)R
                where 1=1) S
                where board_distinct_no = 5
				order by content_date DESC ) A
			<where>
				<![CDATA[
					rn>=#{startrow} and rn<=#{endrow}
				]]>	
			</where>
</select>  

<!-- 자유게시판 디테일 -->
<select id="userforumdetail" parameterType="int" resultMap="reviewdto">
	select content_no, user_id, e1.user_no, board_distinct_no, content_title, content_content, content_date, content_like, content_hate
	from comm_board e1 left join user_info e2 
	on e1.user_no=e2.user_no
	where content_no = #{contentno}
</select>


  
  
<!-- 리뷰 좋아요 -->
<update id="reviewlike" parameterType="int">
	update comm_board
	set content_like = content_like+1
	where content_no = #{contentno}
</update>
<!-- 리뷰 싫어요 -->
<update id="reviewdislike" parameterType="int">
	update comm_board
	set content_hate = content_hate+1
	where content_no = #{contentno}
</update>


<!-- 리뷰 등록 -->
<insert id="reviewinsert" parameterMap="hashmap">
	insert into comm_board (user_no, content_content, content_date, board_distinct_no, content_like, content_hate)
	values(#{userno}, #{contents}, now(), 1, 0, 0 )
</insert>

<update id="reviewmodify" parameterMap="hashmap">
	update comm_board
	set content_content = #{contents}
	where content_no = #{contentno}
</update>
  
  
<!-- 리뷰 삭제 -->
<delete id="reviewdelete" parameterType="int">
	delete from comm_board
	where content_no = #{contentno}
</delete>
  
  
  
  
</mapper>
